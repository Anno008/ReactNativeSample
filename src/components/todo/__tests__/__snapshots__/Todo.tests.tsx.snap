// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Todo component test should render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Todo
    deleteTodoItem={[MockFunction]}
    todos={
      Array [
        Object {
          "finished": false,
          "id": 1,
          "name": "test",
        },
      ]
    }
    toggleTodoItem={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Text
          style={
            Object {
              "fontSize": 20,
              "fontWeight": "bold",
            }
          }
        >
          Todos
        </Text>,
        <ScrollView
          contentContainerStyle={
            Object {
              "flexGrow": 1,
            }
          }
          onContentSizeChange={[Function]}
          style={
            Object {
              "flex": 1,
              "width": "100%",
            }
          }
        >
          <Unknown
            deleteTodo={[Function]}
            todo={
              Object {
                "finished": false,
                "id": 1,
                "name": "test",
              }
            }
            toggleTodo={[Function]}
          />
        </ScrollView>,
        <Connect(CreateTodo) />,
      ],
      "style": Object {
        "alignItems": "center",
        "flex": 1,
        "flexDirection": "column",
        "justifyContent": "center",
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "Todos",
          "style": Object {
            "fontSize": 20,
            "fontWeight": "bold",
          },
        },
        "ref": null,
        "rendered": "Todos",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Unknown
              deleteTodo={[Function]}
              todo={
                Object {
                  "finished": false,
                  "id": 1,
                  "name": "test",
                }
              }
              toggleTodo={[Function]}
            />,
          ],
          "contentContainerStyle": Object {
            "flexGrow": 1,
          },
          "onContentSizeChange": [Function],
          "style": Object {
            "flex": 1,
            "width": "100%",
          },
        },
        "ref": Object {
          "current": null,
        },
        "rendered": Array [
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "function",
            "props": Object {
              "deleteTodo": [Function],
              "todo": Object {
                "finished": false,
                "id": 1,
                "name": "test",
              },
              "toggleTodo": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [MockFunction],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Text
            style={
              Object {
                "fontSize": 20,
                "fontWeight": "bold",
              }
            }
          >
            Todos
          </Text>,
          <ScrollView
            contentContainerStyle={
              Object {
                "flexGrow": 1,
              }
            }
            onContentSizeChange={[Function]}
            style={
              Object {
                "flex": 1,
                "width": "100%",
              }
            }
          >
            <Unknown
              deleteTodo={[Function]}
              todo={
                Object {
                  "finished": false,
                  "id": 1,
                  "name": "test",
                }
              }
              toggleTodo={[Function]}
            />
          </ScrollView>,
          <Connect(CreateTodo) />,
        ],
        "style": Object {
          "alignItems": "center",
          "flex": 1,
          "flexDirection": "column",
          "justifyContent": "center",
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Todos",
            "style": Object {
              "fontSize": 20,
              "fontWeight": "bold",
            },
          },
          "ref": null,
          "rendered": "Todos",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Unknown
                deleteTodo={[Function]}
                todo={
                  Object {
                    "finished": false,
                    "id": 1,
                    "name": "test",
                  }
                }
                toggleTodo={[Function]}
              />,
            ],
            "contentContainerStyle": Object {
              "flexGrow": 1,
            },
            "onContentSizeChange": [Function],
            "style": Object {
              "flex": 1,
              "width": "100%",
            },
          },
          "ref": Object {
            "current": null,
          },
          "rendered": Array [
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "function",
              "props": Object {
                "deleteTodo": [Function],
                "todo": Object {
                  "finished": false,
                  "id": 1,
                  "name": "test",
                },
                "toggleTodo": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [MockFunction],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
